#!/bin/sh
# Test whether .ctors or .init_array is generated by the compiler
# Copyright (C) 2012 Kyle McMartin <kmcmarti@redhat.com>

j=`mktemp ./.tmp.XXXXXX`

cat <<EOF | ${CROSS_COMPILE}as -o $j.o >/dev/null 2>&1
/* Test whether the compiler will produce .ctors/.dtors sections, or move
 * them into .{init,fini}_array.
 *
 * Necessary in order to figure out what section gcov data will end up in,
 * which is dependent on both the compiler version, the linker version
 * used to build the compiler and configure flags passed to the gcc build
 * (--enable-initfini-array)
 *
 * Inspired by a test in the gcc aclocal.m4, which was replaced by a linker
 * test in the 4.7 branch (and --enable-initfini-array made the default if
 * ld is capable of it.)
 *
 * Ordering is .ctors backwards, and .init_array forward, where the priority
 * specifier is taken from 0 for .init_array, and 65535-$pri for .ctors.
 *
 * Sadly we can't just run test this, since we may be building in a cross
 * compiled environment.
 *
 * Copyright (C) 2011 H.J. Lu  <hongjiu.lu@intel.com>
 * Copyright (C) 2012 Kyle McMartin <kmcmarti@redhat.com>
 *
 */
.section .ctors,"a",%progbits
.balign 4
.byte 'A', 'A', 'A', 'A'
.section .init_array.65534,"a",%progbits
.balign 4
.byte 'B', 'B', 'B', 'B'
.section .ctors.1024,"a",%progbits
.balign 4
.byte 'C', 'C', 'C', 'C'
.text
.globl _start
_start:
EOF

${CROSS_COMPILE}ld -e 0 -o $j $j.o
( ${CROSS_COMPILE}objdump -t -j .ctors $j 2>&1 2>&1 | grep -q "not found" ) && \
( ${CROSS_COMPILE}objdump -s -j .init_array $j 2>&1 2>&1 | grep -q "CCCCBBBBAAAA" ) && echo y

rm -f $j $j.o
